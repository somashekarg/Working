@using OneDirect.ViewModels
@using Microsoft.AspNetCore.Mvc
@using Microsoft.AspNetCore.Http
@using OneDirect.Helper
@model NewPatientWithProtocol

@{

}

<!-- Main content -->

<div class="col-md-12" style="padding-top:20px">
    <!-- Horizontal Form -->
    <div class="box box-info">

        <!-- /.box-header -->
        <!-- form start -->
        @using (Html.BeginForm("PatientRx", "CreatePatient", FormMethod.Post, new { enctype = "multipart/form-data" }))
    {
        @Html.AntiForgeryToken()
        @Html.Hidden("Surgerydate", (DateTime)ViewBag.SurgeryDate)
        @Html.Hidden("etype", (string)ViewBag.EquipmentType)

        @if (Context.Session.GetString("UserType") == ConstantsVar.Therapist.ToString())
    {
        @if (ViewBag.EquipmentType == "Ankle" || ViewBag.EquipmentType == "Knee")
    {
        @for (int i = 0; i < Model.NewPatientRXList.Count(); i++)
    {
        @Html.HiddenFor(model => Model.NewPatientRXList[i].EquipmentType)
        @Html.HiddenFor(model => Model.NewPatientRXList[i].DeviceConfiguration)
        @Html.HiddenFor(model => Model.NewPatientRXList[i].ProtocolEnum)
        @Html.HiddenFor(model => Model.NewPatientRXList[i].ProtocolName)
        @Html.HiddenFor(model => Model.NewPatientRXList[i].RxId)
        @Html.HiddenFor(model => Model.NewPatientRXList[i].PatientId)
        @Html.HiddenFor(model => Model.NewPatientRXList[i].ProviderId)
        @Html.HiddenFor(model => Model.NewPatientRXList[i].Action)
        @Html.HiddenFor(model => Model.returnView)
        <div class="box-body" style="font-size:small">
            <div class="col-md-12  no-padding">
                <div class="col-md-4">
                    <div class="form-group">
                        <label for="EquipmentType" class="control-label">Therapy Type</label>
                        <div>
                            <h4>@Model.NewPatientRXList[i].TherapyType</h4>
                        </div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="form-group">
                        <label>Start Date</label>
                        <div class="input-group date">
                            <div class="input-group-addon">
                                <i class="fa fa-calendar"></i>
                            </div>
                            @Html.TextBoxFor(model => @Model.NewPatientRXList[i].RxStartDate, new { @class = "form-control datepicker", autocomplete = "off", @readonly = true })
                        </div>
                        @Html.ValidationMessageFor(model => @Model.NewPatientRXList[i].RxStartDate, "", new { @class = "error" })
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="form-group">
                        <label>End Date</label>
                        <div class="input-group date">
                            <div class="input-group-addon">
                                <i class="fa fa-calendar"></i>
                            </div>
                            @Html.TextBoxFor(model => @Model.NewPatientRXList[i].RxEndDate, new { @class = "form-control datepicker", autocomplete = "off", @readonly = true })
                        </div>
                        @Html.ValidationMessageFor(model => @Model.NewPatientRXList[i].RxEndDate, "", new { @class = "error" })
                    </div>
                </div>
            </div>
            <div class="col-md-12">
                <div class="col-md-6  no-padding" style="margin-bottom:2px;margin-top:2px;">
                    <h4>@Model.NewPatientRXList[i].HeadingFlexion</h4>
                    <div class="col-md-6" style="margin-left: -14px;">
                        <div class="form-group" style="margin-bottom:2px;">
                            <label for="MaxUpLimit" class="control-label">Current End Range</label>
                            <div>Angle should be between @Model.NewPatientRXList[i].Flex_Current_Start to @Model.NewPatientRXList[i].Flex_Current_End</div>
                            <div>
                                @Html.TextBoxFor(model => @Model.NewPatientRXList[i].CurrentFlexion, new { @class = "form-control", @type = "number", autocomplete = "off", @readonly = true })
                                @Html.ValidationMessageFor(model => @Model.NewPatientRXList[i].CurrentFlexion)
                            </div>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-group" style="margin-bottom:2px;">
                            <label for="MaxDownLimit" class="control-label">End Range Goal</label>
                            <div>Angle should be between @Model.NewPatientRXList[i].Flex_Goal_Start to @Model.NewPatientRXList[i].Flex_Goal_End</div>
                            <div>
                                @Html.TextBoxFor(model => @Model.NewPatientRXList[i].GoalFlexion, new { @class = "form-control", @type = "number", autocomplete = "off", @readonly = true })
                                @Html.ValidationMessageFor(model => @Model.NewPatientRXList[i].GoalFlexion)
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-md-6  no-padding" style="margin-bottom:2px;margin-top:2px;">
                    <h4>@Model.NewPatientRXList[i].HeadingExtension</h4>
                    <div class="col-md-6" style="margin-left: -14px;">
                        <div class="form-group" style="margin-bottom:2px;">
                            <label for="MaxUpLimit" class="control-label">Current End Range</label>
                            <div>Angle should be between @Model.NewPatientRXList[i].Ext_Current_Start to @Model.NewPatientRXList[i].Ext_Current_End</div>
                            <div>
                                @Html.TextBoxFor(model => @Model.NewPatientRXList[i].CurrentExtension, new { @class = "form-control", @type = "number", autocomplete = "off", @readonly = true })
                                @Html.ValidationMessageFor(model => @Model.NewPatientRXList[i].CurrentExtension)
                            </div>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-group" style="margin-bottom:2px;">
                            <label for="MaxDownLimit" class="control-label">End Range Goal</label>
                            <div>Angle should be between @Model.NewPatientRXList[i].Ext_Goal_Start to @Model.NewPatientRXList[i].Ext_Goal_End</div>
                            <div>
                                @Html.TextBoxFor(model => @Model.NewPatientRXList[i].GoalExtension, new { @class = "form-control", @type = "number", autocomplete = "off", @readonly = true })
                                @Html.ValidationMessageFor(model => @Model.NewPatientRXList[i].GoalExtension)
                            </div>
                        </div>
                    </div>
                </div>

            </div>
        </div>

        <div class="col-md-12 no-padding" style="margin-left: 11px;">
            <div class="col-md-3">
                <div class="form-group" style="margin-bottom:2px;">
                    <label for="PainThreshold" class="control-label">Pain Threshold</label>
                    <div>
                        @Html.TextBoxFor(model => @Model.PainThreshold, new { @class = "form-control", @type = "number", autocomplete = "off", @readonly = true })
                        @Html.ValidationMessageFor(model => @Model.PainThreshold)
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="form-group" style="margin-bottom:2px;">
                    <label for="RateOfChange" class="control-label">Degrees per Exercise</label>
                    <div>
                        @Html.TextBoxFor(model => @Model.RateOfChange, new { @class = "form-control", @type = "number", autocomplete = "off", @readonly = true })
                        @Html.ValidationMessageFor(model => @Model.RateOfChange)
                    </div>
                </div>
            </div>

        </div>

}
}
else
{
    @for (int i = 0; i < Model.NewPatientRXList.Count(); i++)
{
    @Html.HiddenFor(model => Model.NewPatientRXList[i].EquipmentType)
    @Html.HiddenFor(model => Model.NewPatientRXList[i].DeviceConfiguration)
    @Html.HiddenFor(model => Model.NewPatientRXList[i].ProtocolEnum)
    @Html.HiddenFor(model => Model.NewPatientRXList[i].ProtocolName)
    @Html.HiddenFor(model => Model.NewPatientRXList[i].RxId)
    @Html.HiddenFor(model => Model.NewPatientRXList[i].PatientId)
    @Html.HiddenFor(model => Model.NewPatientRXList[i].ProviderId)
    @Html.HiddenFor(model => Model.NewPatientRXList[i].Action)
    @Html.HiddenFor(model => Model.returnView)
    <div class="box-body" style="font-size:small;border:1px solid gray">

        @if (Model.NewPatientRXList[i].TherapyType == "Straight Arm Forward Flexion")
    {
        <div class="col-md-12  no-padding">
            <div class="col-md-6">
                <div class="form-group">
                    <label>Start Date</label>
                    <div class="input-group date">
                        <div class="input-group-addon">
                            <i class="fa fa-calendar"></i>
                        </div>
                        @Html.TextBoxFor(model => @Model.NewPatientRXList[i].RxStartDate, new { @class = "form-control datepicker", autocomplete = "off", @readonly = true })

                    </div>
                    @Html.ValidationMessageFor(model => @Model.NewPatientRXList[i].RxStartDate, "", new { @class = "error" })
                </div>
            </div>
            <div class="col-md-6">
                <div class="form-group">
                    <label>End Date</label>
                    <div class="input-group date">
                        <div class="input-group-addon">
                            <i class="fa fa-calendar"></i>
                        </div>
                        @Html.TextBoxFor(model => @Model.NewPatientRXList[i].RxEndDate, new { @class = "form-control datepicker", autocomplete = "off", @readonly = true })

                    </div>
                    @Html.ValidationMessageFor(model => @Model.NewPatientRXList[i].RxEndDate, "", new { @class = "error" })
                </div>
            </div>
        </div>
}

        <div class="col-md-12  no-padding">
            <div class="col-md-4">
                <div class="form-group">
                    <label for="EquipmentType" class="control-label">Therapy Type</label>
                    <div>
                        <h4>@Model.NewPatientRXList[i].TherapyType</h4>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-12  no-padding">
            <h4 style="padding-left: 14px;">@Model.NewPatientRXList[i].HeadingFlexion</h4>
            <div class="col-md-4">
                <div class="form-group">
                    <label for="MaxUpLimit" class="control-label">Current End Range</label>
                    <div>Angle should be between @Model.NewPatientRXList[i].Flex_Current_Start to @Model.NewPatientRXList[i].Flex_Current_End</div>
                    <div>
                        @Html.TextBoxFor(model => @Model.NewPatientRXList[i].CurrentFlexion, new { @class = "form-control", @type = "number", autocomplete = "off", @readonly = true })
                        @Html.ValidationMessageFor(model => @Model.NewPatientRXList[i].CurrentFlexion)
                    </div>
                </div>
            </div>
            <div class="col-md-4">
                <div class="form-group" style="margin-bottom:2px;">
                    <label for="MaxDownLimit" class="control-label">End Range Goal</label>
                    <div>Angle should be between @Model.NewPatientRXList[i].Flex_Goal_Start to @Model.NewPatientRXList[i].Flex_Goal_End</div>
                    <div>
                        @Html.TextBoxFor(model => @Model.NewPatientRXList[i].GoalFlexion, new { @class = "form-control", @type = "number", autocomplete = "off", @readonly = true })
                        @Html.ValidationMessageFor(model => @Model.NewPatientRXList[i].GoalFlexion)
                    </div>
                </div>
            </div>
        </div>
    </div>

}
//kajal
    <div class="col-md-12  no-padding" style="margin-left: 11px;">
        <div class="col-md-3">
            <div class="form-group" style="margin-bottom:2px;">
                <label for="PainThreshold" class="control-label">Pain Threshold</label>
                <div>
                    @Html.TextBoxFor(model => @Model.PainThreshold, new { @class = "form-control", @type = "number", autocomplete = "off", @readonly = true })
                    @Html.ValidationMessageFor(model => @Model.PainThreshold)
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="form-group" style="margin-bottom:2px;">
                <label for="RateOfChange" class="control-label">Degrees per Exercise</label>
                <div>
                    @Html.TextBoxFor(model => @Model.RateOfChange, new { @class = "form-control", @type = "number", autocomplete = "off", @readonly = true })
                    @Html.ValidationMessageFor(model => @Model.RateOfChange)
                </div>
            </div>
        </div>

    </div>
}
}
else
{

    @if (ViewBag.EquipmentType == "Ankle" || ViewBag.EquipmentType == "Knee")
{
    @for (int i = 0; i < Model.NewPatientRXList.Count(); i++)
{
    @Html.HiddenFor(model => Model.NewPatientRXList[i].EquipmentType)
    @Html.HiddenFor(model => Model.NewPatientRXList[i].DeviceConfiguration)
    @Html.HiddenFor(model => Model.NewPatientRXList[i].ProtocolEnum)
    @Html.HiddenFor(model => Model.NewPatientRXList[i].ProtocolName)
    @Html.HiddenFor(model => Model.NewPatientRXList[i].RxId)
    @Html.HiddenFor(model => Model.NewPatientRXList[i].PatientId)
    @Html.HiddenFor(model => Model.NewPatientRXList[i].ProviderId)
    @Html.HiddenFor(model => Model.NewPatientRXList[i].Action)
    @Html.HiddenFor(model => Model.returnView)
    <div class="box-body" style="font-size:small">
        <div class="col-md-12  no-padding">
            <div class="col-md-4">
                <div class="form-group">
                    <label for="EquipmentType" class="control-label">Therapy Type</label>
                    <div>
                        <h4>@Model.NewPatientRXList[i].TherapyType</h4>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="form-group">
                    <label>Start Date</label>
                    <div class="input-group date">
                        <div class="input-group-addon">
                            <i class="fa fa-calendar"></i>
                        </div>
                        @Html.TextBoxFor(model => @Model.NewPatientRXList[i].RxStartDate, new { @class = "form-control datepicker", autocomplete = "off" })
                    </div>
                    @Html.ValidationMessageFor(model => @Model.NewPatientRXList[i].RxStartDate, "", new { @class = "error" })
                </div>
            </div>
            <div class="col-md-3">
                <div class="form-group">
                    <label>End Date</label>
                    <div class="input-group date">
                        <div class="input-group-addon">
                            <i class="fa fa-calendar"></i>
                        </div>
                        @Html.TextBoxFor(model => @Model.NewPatientRXList[i].RxEndDate, new { @class = "form-control datepicker", autocomplete = "off" })
                    </div>
                    @Html.ValidationMessageFor(model => @Model.NewPatientRXList[i].RxEndDate, "", new { @class = "error" })
                </div>
            </div>
        </div>
        <div class="col-md-12">
            <div class="col-md-6 no-padding" style="margin-bottom:2px;margin-top:2px;">
                <h4>@Model.NewPatientRXList[i].HeadingFlexion</h4>
                <div class="col-md-6" style="margin-left: -14px;">
                    <div class="form-group" style="margin-bottom:2px;">
                        <label for="MaxUpLimit" class="control-label">Current End Range</label>
                        <div>Angle should be between @Model.NewPatientRXList[i].Flex_Current_Start to @Model.NewPatientRXList[i].Flex_Current_End</div>
                        <div>
                            @Html.TextBoxFor(model => @Model.NewPatientRXList[i].CurrentFlexion, new { @class = "form-control", @type = "number", autocomplete = "off" })
                            @Html.ValidationMessageFor(model => @Model.NewPatientRXList[i].CurrentFlexion)
                        </div>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="form-group" style="margin-bottom:2px;">
                        <label for="MaxDownLimit" class="control-label">End Range Goal</label>
                        <div>Angle should be between @Model.NewPatientRXList[i].Flex_Goal_Start to @Model.NewPatientRXList[i].Flex_Goal_End</div>
                        <div>
                            @Html.TextBoxFor(model => @Model.NewPatientRXList[i].GoalFlexion, new { @class = "form-control", @type = "number", autocomplete = "off" })
                            @Html.ValidationMessageFor(model => @Model.NewPatientRXList[i].GoalFlexion)
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-md-6 no-padding" style="margin-bottom:2px;margin-top:2px;">
                <h4>@Model.NewPatientRXList[i].HeadingExtension</h4>
                <div class="col-md-6" style="margin-left: -14px;">
                    <div class="form-group" style="margin-bottom:2px;">
                        <label for="MaxUpLimit" class="control-label">Current End Range</label>
                        <div>Angle should be between @Model.NewPatientRXList[i].Ext_Current_Start to @Model.NewPatientRXList[i].Ext_Current_End</div>
                        <div>
                            @Html.TextBoxFor(model => @Model.NewPatientRXList[i].CurrentExtension, new { @class = "form-control", @type = "number", autocomplete = "off" })
                            @Html.ValidationMessageFor(model => @Model.NewPatientRXList[i].CurrentExtension)
                        </div>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="form-group" style="margin-bottom:2px;">
                        <label for="MaxDownLimit" class="control-label">End Range Goal</label>
                        <div>Angle should be between @Model.NewPatientRXList[i].Ext_Goal_Start to @Model.NewPatientRXList[i].Ext_Goal_End</div>
                        <div>
                            @Html.TextBoxFor(model => @Model.NewPatientRXList[i].GoalExtension, new { @class = "form-control", @type = "number", autocomplete = "off" })
                            @Html.ValidationMessageFor(model => @Model.NewPatientRXList[i].GoalExtension)
                        </div>
                    </div>
                </div>
            </div>

        </div>
    </div>
    <div class="col-md-12  no-padding" style="margin-left: 11px;">
        <div class="col-md-3">
            <div class="form-group" style="margin-bottom:2px;">
                <label for="PainThreshold" class="control-label">Pain Threshold</label>
                <div>
                    @Html.TextBoxFor(model => @Model.PainThreshold, new { @class = "form-control", @type = "number", autocomplete = "off" })
                    @Html.ValidationMessageFor(model => @Model.PainThreshold)
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="form-group" style="margin-bottom:2px;">
                <label for="RateOfChange" class="control-label">Degrees per Exercise</label>
                <div>
                    @Html.TextBoxFor(model => @Model.RateOfChange, new { @class = "form-control", @type = "number", autocomplete = "off" })
                    @Html.ValidationMessageFor(model => @Model.RateOfChange)
                </div>
            </div>
        </div>

    </div>
}
}
else
{
    @for (int i = 0; i < Model.NewPatientRXList.Count(); i++)
{
    @Html.HiddenFor(model => Model.NewPatientRXList[i].EquipmentType)
    @Html.HiddenFor(model => Model.NewPatientRXList[i].DeviceConfiguration)
    @Html.HiddenFor(model => Model.NewPatientRXList[i].ProtocolEnum)
    @Html.HiddenFor(model => Model.NewPatientRXList[i].ProtocolName)
    @Html.HiddenFor(model => Model.NewPatientRXList[i].RxId)
    @Html.HiddenFor(model => Model.NewPatientRXList[i].PatientId)
    @Html.HiddenFor(model => Model.NewPatientRXList[i].ProviderId)
    @Html.HiddenFor(model => Model.NewPatientRXList[i].Action)
    @Html.HiddenFor(model => Model.returnView)
    <div class="box-body" style="font-size:small;border:1px solid gray">

        @if (Model.NewPatientRXList[i].TherapyType == "Straight Arm Forward Flexion")
    {
        <div class="col-md-12">
            <div class="col-md-6">
                <div class="form-group">
                    <label>Start Date</label>
                    <div class="input-group date">
                        <div class="input-group-addon">
                            <i class="fa fa-calendar"></i>
                        </div>
                        @Html.TextBoxFor(model => @Model.NewPatientRXList[i].RxStartDate, new { @class = "form-control datepicker", autocomplete = "off" })

                    </div>
                    @Html.ValidationMessageFor(model => @Model.NewPatientRXList[i].RxStartDate, "", new { @class = "error" })
                </div>
            </div>
            <div class="col-md-6">
                <div class="form-group">
                    <label>End Date</label>
                    <div class="input-group date">
                        <div class="input-group-addon">
                            <i class="fa fa-calendar"></i>
                        </div>
                        @Html.TextBoxFor(model => @Model.NewPatientRXList[i].RxEndDate, new { @class = "form-control datepicker", autocomplete = "off" })

                    </div>
                    @Html.ValidationMessageFor(model => @Model.NewPatientRXList[i].RxEndDate, "", new { @class = "error" })
                </div>
            </div>
        </div>
}

        <div class="col-md-12">
            <div class="col-md-4">
                <div class="form-group">
                    <label for="EquipmentType" class="control-label">Therapy Type</label>
                    <div>
                        <h4>@Model.NewPatientRXList[i].TherapyType</h4>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-12">
            <h4 style="padding-left: 14px;">@Model.NewPatientRXList[i].HeadingFlexion</h4>
            <div class="col-md-4">
                <div class="form-group">
                    <label for="MaxUpLimit" class="control-label">Current End Range</label>
                    <div>Angle should be between @Model.NewPatientRXList[i].Flex_Current_Start to @Model.NewPatientRXList[i].Flex_Current_End</div>
                    <div>
                        @Html.TextBoxFor(model => @Model.NewPatientRXList[i].CurrentFlexion, new { @class = "form-control", @type = "number", autocomplete = "off" })
                        @Html.ValidationMessageFor(model => @Model.NewPatientRXList[i].CurrentFlexion)
                    </div>
                </div>
            </div>
            <div class="col-md-4">
                <div class="form-group" style="margin-bottom:2px;">
                    <label for="MaxDownLimit" class="control-label">End Range Goal</label>
                    <div>Angle should be between @Model.NewPatientRXList[i].Flex_Goal_Start to @Model.NewPatientRXList[i].Flex_Goal_End</div>
                    <div>
                        @Html.TextBoxFor(model => @Model.NewPatientRXList[i].GoalFlexion, new { @class = "form-control", @type = "number", autocomplete = "off" })
                        @Html.ValidationMessageFor(model => @Model.NewPatientRXList[i].GoalFlexion)
                    </div>
                </div>
            </div>
        </div>


    </div>
}
    <div class="col-md-12">
        <div class="col-md-4">
            <div class="form-group" style="margin-bottom:2px;">
                <label for="PainThreshold" class="control-label">Pain Threshold</label>
                <div>
                    @Html.TextBoxFor(model => @Model.PainThreshold, new { @class = "form-control", @type = "number", autocomplete = "off" })
                    @Html.ValidationMessageFor(model => @Model.PainThreshold)
                </div>
            </div>
        </div>
        <div class="col-md-4">
            <div class="form-group" style="margin-bottom:2px;">
                <label for="RateOfChange" class="control-label">Degrees per Exercise</label>
                <div>
                    @Html.TextBoxFor(model => @Model.RateOfChange, new { @class = "form-control", @type = "number", autocomplete = "off" })
                    @Html.ValidationMessageFor(model => @Model.RateOfChange)
                </div>
            </div>
        </div>

    </div>
}

}

        <div class="box-footer">
            @if (ViewBag.Action == "edit")


        {
            @if (Context.Session.GetString("UserType") != ConstantsVar.Therapist.ToString())
        {
            <button type="submit" class="btn btn-success pull-right" style="margin-left:10px;">Save Changes</button>
    }
    }

        </div>
}
    </div>
</div>
